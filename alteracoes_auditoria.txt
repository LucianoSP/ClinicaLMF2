Alterações necessárias para corrigir os cards da auditoria:

1. Em database_supabase.py:

```python
def registrar_execucao_auditoria(
    data_inicial: str = None,
    data_final: str = None,
    total_protocolos: int = 0,
    total_divergencias: int = 0,
    divergencias_por_tipo: dict = None,
    total_fichas: int = 0,
    total_execucoes: int = 0,
    total_resolvidas: int = 0
) -> bool:
    """Registra uma nova execução de auditoria com seus metadados."""
    try:
        data = {
            "data_execucao": datetime.now(timezone.utc).isoformat(),
            "data_inicial": data_inicial,
            "data_final": data_final,
            "total_protocolos": total_protocolos,
            "total_divergencias": total_divergencias,
            "divergencias_por_tipo": divergencias_por_tipo or {},
            "total_fichas": total_fichas,
            "total_execucoes": total_execucoes,
            "total_resolvidas": total_resolvidas
        }

        response = supabase.table("auditoria_execucoes").insert(data).execute()
        return True if response.data else False

    except Exception as e:
        logging.error(f"Erro ao registrar execução de auditoria: {str(e)}")
        traceback.print_exc()
        return False


def obter_ultima_auditoria():
    """Obtém o resultado da última auditoria realizada e calcula estatísticas das divergências."""
    try:
        # Busca a última execução de auditoria
        response = (
            supabase.table("auditoria_execucoes")
            .select("*")
            .order("data_execucao", desc=True)
            .limit(1)
            .execute()
        )

        if not response.data:
            return {
                "total_protocolos": 0,
                "total_divergencias": 0,
                "divergencias_por_tipo": {},
                "total_fichas": 0,
                "total_execucoes": 0,
                "total_resolvidas": 0,
                "data_execucao": None,
                "tempo_execucao": None
            }

        ultima_auditoria = response.data[0]

        # Calcula o tempo desde a última execução
        data_execucao = datetime.fromisoformat(ultima_auditoria["data_execucao"].replace("Z", "+00:00"))
        agora = datetime.now(timezone.utc)
        diferenca = agora - data_execucao

        # Formata o tempo de execução
        if diferenca.days > 0:
            tempo_execucao = f"Há {diferenca.days} dias"
        elif diferenca.seconds > 3600:
            tempo_execucao = f"Há {diferenca.seconds // 3600} horas"
        elif diferenca.seconds > 60:
            tempo_execucao = f"Há {diferenca.seconds // 60} minutos"
        else:
            tempo_execucao = f"Há {diferenca.seconds} segundos"

        return {
            "total_protocolos": ultima_auditoria.get("total_protocolos", 0),
            "total_divergencias": ultima_auditoria.get("total_divergencias", 0),
            "divergencias_por_tipo": ultima_auditoria.get("divergencias_por_tipo", {}),
            "total_fichas": ultima_auditoria.get("total_fichas", 0),
            "total_execucoes": ultima_auditoria.get("total_execucoes", 0),
            "total_resolvidas": ultima_auditoria.get("total_resolvidas", 0),
            "data_execucao": ultima_auditoria["data_execucao"],
            "tempo_execucao": tempo_execucao
        }

    except Exception as e:
        logging.error(f"Erro ao obter última auditoria: {str(e)}")
        traceback.print_exc()
        return None
```

2. Em auditoria.py:

```python
def realizar_auditoria_fichas_execucoes(
    data_inicial: str = None, data_final: str = None
):
    """
    Realiza a auditoria cruzando dados entre as tabelas de fichas_presenca e execucoes,
    registrando divergências encontradas.

    Args:
        data_inicial: Data inicial para filtrar (formato: YYYY-MM-DD ou DD/MM/YYYY)
        data_final: Data final para filtrar (formato: YYYY-MM-DD ou DD/MM/YYYY)
    """
    logging.info("Iniciando processo de auditoria de fichas vs execuções...")
    start_time = datetime.now()

    try:
        # Limpa divergências antigas antes de começar nova auditoria
        limpar_divergencias_db()
        logging.info("Divergências antigas removidas com sucesso")

        # Converte datas para formato ISO se necessário
        if data_inicial and "/" in data_inicial:
            data_inicial = datetime.strptime(data_inicial, "%d/%m/%Y").strftime("%Y-%m-%d")
        if data_final and "/" in data_final:
            data_final = datetime.strptime(data_final, "%d/%m/%Y").strftime("%Y-%m-%d")

        # Busca todas as fichas de presença, execuções e guias
        fichas = listar_fichas_presenca(limit=0)
        execucoes = listar_execucoes(limit=0)
        guias = listar_guias(limit=0)  

        if not isinstance(fichas, list):
            fichas = []
        if not isinstance(execucoes, list):
            execucoes = []
        if not isinstance(guias, list):
            guias = []

        # Filtra por data se necessário
        if data_inicial:
            fichas = [f for f in fichas if f.get("data_atendimento") and f["data_atendimento"] >= data_inicial]
            execucoes = [e for e in execucoes if e.get("data_execucao") and e["data_execucao"] >= data_inicial]
        if data_final:
            fichas = [f for f in fichas if f.get("data_atendimento") and f["data_atendimento"] <= data_final]
            execucoes = [e for e in execucoes if e.get("data_execucao") and e["data_execucao"] <= data_final]

        # ... resto da função continua igual ...

        # No final, registra os metadados da auditoria
        registrar_execucao_auditoria(
            data_inicial=data_inicial,
            data_final=data_final,
            total_protocolos=total_fichas,  # Agora é só o total de fichas
            total_divergencias=divergencias_encontradas,
            divergencias_por_tipo={
                "execucao_sem_ficha": total_execucoes_sem_ficha,
                "ficha_sem_execucao": total_fichas_sem_execucao,
                "data_divergente": total_datas_divergentes,
                "ficha_sem_assinatura": total_fichas_sem_assinatura,
                "guia_vencida": total_guias_vencidas,
                "quantidade_excedida": total_quantidade_excedida
            },
            total_fichas=total_fichas,  # Novo campo específico para fichas
            total_execucoes=total_execucoes,  # Novo campo específico para execuções
            total_resolvidas=0  # Inicialmente todas as divergências estão não resolvidas
        )
```

3. Em app.py:

```python
@app.post("/auditoria/iniciar")
async def iniciar_auditoria(request: AuditoriaRequest = Body(...)):
    try:
        logger.info(
            f"Iniciando auditoria com data_inicial={request.data_inicio}, data_final={request.data_fim}"
        )
        # Converte as datas para o formato correto se necessário
        data_inicial = request.data_inicio
        data_final = request.data_fim
        if data_inicial and "/" not in data_inicial:
            data_inicial = datetime.strptime(data_inicial, "%Y-%m-%d").strftime("%d/%m/%Y")
        if data_final and "/" not in data_final:
            data_final = datetime.strptime(data_final, "%Y-%m-%d").strftime("%d/%m/%Y")

        realizar_auditoria_fichas_execucoes(data_inicial, data_final)
        ultima_auditoria = obter_ultima_auditoria()
        return {"message": "Auditoria realizada com sucesso", "data": ultima_auditoria}
    except Exception as e:
        logger.error(f"Erro ao realizar auditoria: {str(e)}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))
```

4. Em frontend/src/components/auditoria/EstatisticasCards.tsx:

```typescript
const EstatisticasCards = ({ resultadoAuditoria }) => {
  if (!resultadoAuditoria) return null;

  const {
    total_fichas_sem_execucao = 0,
    total_datas_divergentes = 0,
    total_fichas = 0,  // Agora usa o campo específico
    total_execucoes = 0,  // Novo campo
    total_resolvidas = 0,  // Novo campo
    total_divergencias = 0,
  } = resultadoAuditoria;

  // ... resto do componente continua igual ...

  return (
    <div className="space-y-6">
      {/* Cards */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        {/* Total de Guias */}
        <CardWrapper>
          <Card className="bg-gradient-to-br from-blue-50 to-white shadow-lg hover:shadow-xl transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-semibold text-blue-900">Total de Guias</CardTitle>
              <div className="rounded-full bg-blue-100 p-2">
                <Files className="h-6 w-6 text-blue-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col space-y-1">
                <div className="text-3xl font-bold text-blue-800">{total_execucoes}</div>
                <p className="text-xs text-blue-600">Guias analisadas</p>
              </div>
            </CardContent>
          </Card>
        </CardWrapper>

        {/* Total de Fichas */}
        <CardWrapper>
          <Card className="bg-gradient-to-br from-blue-50 to-white shadow-lg hover:shadow-xl transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-semibold text-blue-900">Total de Fichas</CardTitle>
              <div className="rounded-full bg-blue-100 p-2">
                <FileCheck2 className="h-6 w-6 text-blue-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col space-y-1">
                <div className="text-3xl font-bold text-blue-800">{total_fichas}</div>
                <p className="text-xs text-blue-600">Fichas verificadas</p>
              </div>
            </CardContent>
          </Card>
        </CardWrapper>

        {/* Resolvidas */}
        <CardWrapper>
          <Card className="bg-gradient-to-br from-blue-50 to-white shadow-lg hover:shadow-xl transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-semibold text-blue-900">Resolvidas</CardTitle>
              <div className="rounded-full bg-blue-100 p-2">
                <CheckCircle2 className="h-6 w-6 text-blue-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col space-y-1">
                <div className="text-3xl font-bold text-blue-800">
                  {total_divergencias > 0
                    ? Math.round((total_resolvidas / total_divergencias) * 100)
                    : 0}%
                </div>
                <p className="text-xs text-blue-600">Divergências resolvidas</p>
              </div>
            </CardContent>
          </Card>
        </CardWrapper>

        {/* ... outros cards ... */}
      </div>
    </div>
  );
};
```

5. Atualizar o schema do Supabase:

Adicione os novos campos na tabela `auditoria_execucoes`:
- `total_fichas`: integer
- `total_execucoes`: integer 
- `total_resolvidas`: integer
